import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:food_delivery_app/models/order_model.dart';

/// Provider class that manages all order-related operations
class OrderProvider with ChangeNotifier {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  
  List<Order> _orders = [];
  List<Order> _allOrders = [];
  bool _isLoading = false;

  List<Order> get orders => _orders;
  List<Order> get allOrders => _allOrders;
  bool get isLoading => _isLoading;

  /// Fetches orders for the current user
  Future<void> fetchUserOrders(String userId) async {
    try {
      _setLoading(true);
      
      final snapshot = await _firestore
          .collection('orders')
          .where('userId', isEqualTo: userId)
          .orderBy('createdAt', descending: true)
          .get();

      _orders = snapshot.docs
          .map((doc) => Order.fromMap(doc.data(), doc.id))
          .toList();

      _setLoading(false);
    } catch (e) {
      _setLoading(false);
      throw Exception('Failed to fetch orders: ${e.toString()}');
    }
  }

  /// Fetches all orders (admin only)
  Future<void> fetchAllOrders() async {
    try {
      _setLoading(true);
      
      final snapshot = await _firestore
          .collection('orders')
          .orderBy('createdAt', descending: true)
          .get();

      _allOrders = snapshot.docs
          .map((doc) => Order.fromMap(doc.data(), doc.id))
          .toList();

      _setLoading(false);
    } catch (e) {
      _setLoading(false);
      throw Exception('Failed to fetch all orders: ${e.toString()}');
    }
  }

  /// Creates a new order
  Future<void> createOrder({
    required List<CartItem> cartItems,
    required String deliveryAddress,
    required String phone,
    required String note,
    required String paymentMethod,
    required double total,
    required String userId,
    required String restaurantId,
  }) async {
    try {
      _setLoading(true);

      final orderItems = cartItems.map((item) => OrderItem(
        foodId: item.food.id,
        name: item.food.name,
        price: item.food.price,
        quantity: item.quantity,
      )).toList();

      final subtotal = cartItems.fold(
        0, (sum, item) => sum + (item.food.price * item.quantity));

      final order = Order(
        id: '', // Will be generated by Firestore
        userId: userId,
        restaurantId: restaurantId,
        items: orderItems,
        deliveryAddress: deliveryAddress,
        phone: phone,
        note: note,
        paymentMethod: paymentMethod,
        status: 'pending',
        subtotal: subtotal,
        deliveryFee: total - subtotal,
        total: total,
        createdAt: DateTime.now(),
      );

      await _firestore.collection('orders').add(order.toMap());
      await fetchUserOrders(userId); // Refresh orders list

      _setLoading(false);
    } catch (e) {
      _setLoading(false);
      throw Exception('Failed to create order: ${e.toString()}');
    }
  }

  /// Updates order status
  Future<void> updateOrderStatus(String orderId, String status) async {
    try {
      _setLoading(true);
      
      await _firestore.collection('orders').doc(orderId).update({
        'status': status,
        'updatedAt': FieldValue.serverTimestamp(),
      });

      // Update local orders
      final orderIndex = _orders.indexWhere((order) => order.id == orderId);
      if (orderIndex >= 0) {
        _orders[orderIndex] = _orders[orderIndex].copyWith(status: status);
      }

      // Update all orders list (for admin)
      final allOrderIndex = _allOrders.indexWhere((order) => order.id == orderId);
      if (allOrderIndex >= 0) {
        _allOrders[allOrderIndex] = _allOrders[allOrderIndex].copyWith(status: status);
      }

      _setLoading(false);
      notifyListeners();
    } catch (e) {
      _setLoading(false);
      throw Exception('Failed to update order status: ${e.toString()}');
    }
  }

  /// Gets a single order by ID
  Future<Order> getOrderById(String orderId) async {
    try {
      _setLoading(true);
      
      final doc = await _firestore.collection('orders').doc(orderId).get();
      if (!doc.exists) {
        throw Exception('Order not found');
      }

      _setLoading(false);
      return Order.fromMap(doc.data()!, doc.id);
    } catch (e) {
      _setLoading(false);
      throw Exception('Failed to get order: ${e.toString()}');
    }
  }

  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }
}